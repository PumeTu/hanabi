from collections import DynamicVector
from tensor import Tensor, TensorSpec

@value
struct Node:
    """A node in the computation graph
    Args:
        tensor: the tensor stored
        requires_grad (Bool): whether the tensor requries a gradient to be calculated or not.
    """

    var tensor: Tensor[DType.float32]
    var requires_grad: Bool
    var grad: Tensor[DType.float32]

    fn __init__(inout self, tensor: Tensor[DType.float32], requires_grad: Bool):
        self.tensor = tensor
        self.requires_grad = requires_grad
        self.grad = Tensor[DType.float32](tensor.spec)
        self.ops = 

    fn __add__(inout self: Self, other: Self) -> Self:
        return Node(self.tensor + other.tensor)